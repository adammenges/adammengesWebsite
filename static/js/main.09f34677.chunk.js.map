{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","size","_useState","useState","width","window","innerWidth","height","innerHeight","_useState2","Object","slicedToArray","windowSize","setWindowSize","useEffect","onResize","e","document","documentElement","clientWidth","clientHeight","addEventListener","removeEventListener","useWindowSize","small","h","w","console","log","desktop","react_default","a","createElement","style","backgroundColor","position","overflow","className","left","top","fontSize","marginTop","href","mobile","App","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NA6BMA,SAAS,WACb,IAAMC,EAzBc,WAAM,IAAAC,EACUC,mBAAS,iBAAO,CAClDC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,eAHSC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GACnBU,EADmBH,EAAA,GACPI,EADOJ,EAAA,GAqB1B,OAfAK,oBAAU,WACR,IAAMC,EAAW,SAAAC,GACfH,EAAc,CACZT,MAAOa,SAASC,gBAAgBC,YAChCZ,OAAQU,SAASC,gBAAgBE,gBAKrC,OAFAf,OAAOgB,iBAAiB,SAAUN,GAClCV,OAAOgB,iBAAiB,oBAAqBN,GACtC,WACLV,OAAOiB,oBAAoB,SAAUP,GACrCV,OAAOiB,oBAAoB,oBAAqBP,MAI7CH,EAIMW,GACPC,EAAQvB,EAAKG,OAAS,IACtBqB,EAAIxB,EAAKM,OACTmB,EAAIzB,EAAKG,MAEfuB,QAAQC,IAAI,wCACZD,QAAQC,IAAIX,SAASC,gBAAgBC,aAErC,IAAMU,EACJC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,gBAAiB,UACjB3B,OAAQkB,EACRrB,MAAOsB,EACPS,SAAU,WACVC,SAAU,WAGZN,EAAAC,EAAAC,cAAA,OACEK,UAAU,WACVJ,MAAO,CACLE,SAAU,WACVG,KAAMZ,EAAI,EAAI,IACda,IAAKd,EAAI,EAAI,OAGjBK,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLE,SAAU,WACVG,KAAMZ,EAAI,EAAI,IACda,IAAKd,EAAI,EAAI,KAGfK,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLO,SAAU,KAFd,eAOAV,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLO,SAAU,GACVC,WAAY,IAGdX,EAAAC,EAAAC,cAAA,KAAGU,KAAK,8BAAR,wBAEFZ,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLO,SAAU,KAGZV,EAAAC,EAAAC,cAAA,KAAGU,KAAK,oBAAR,mBAKFC,EACJb,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,gBAAiB,UACjB3B,OAAQkB,EACRrB,MAAOsB,EACPS,SAAU,WACVC,SAAU,WAGZN,EAAAC,EAAAC,cAAA,OACEK,UAAU,iBACVJ,MAAO,CACLE,SAAU,WACVG,KAAMZ,EAAI,EAAI,IACda,IAAKd,EAAI,EAAI,IAAM,MAGvBK,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLE,SAAU,WACVG,KAAMZ,EAAI,EAAI,IACda,IAAKd,EAAI,EAAI,MAGfK,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLO,SAAU,KAFd,eAOAV,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLO,SAAU,GACVC,WAAY,IAGdX,EAAAC,EAAAC,cAAA,KAAGU,KAAK,8BAAR,wBAEFZ,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLO,SAAU,KAGZV,EAAAC,EAAAC,cAAA,KAAGU,KAAK,oBAAR,mBAKR,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEE,SAAU,aAAeX,EAAQmB,EAASd,KAOlDe,MAJf,WACE,OAAOd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OAAOrC,MClIX6C,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09f34677.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport { useState, useEffect } from \"react\";\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState(() => ({\n    width: window.innerWidth,\n    height: window.innerHeight\n  }));\n\n  useEffect(() => {\n    const onResize = e => {\n      setWindowSize({\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight\n      });\n    };\n    window.addEventListener(\"resize\", onResize);\n    window.addEventListener(\"orientationchange\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n      window.removeEventListener(\"orientationchange\", onResize);\n    };\n  });\n\n  return windowSize;\n};\n\nconst Header = () => {\n  const size = useWindowSize();\n  const small = size.width <= 640;\n  const h = size.height;\n  const w = size.width;\n\n  console.log(\"document.documentElement.clientWidth\");\n  console.log(document.documentElement.clientWidth);\n\n  const desktop = (\n    <div\n      style={{\n        backgroundColor: \"#00080e\",\n        height: h,\n        width: w,\n        position: \"relative\",\n        overflow: \"hidden\"\n      }}\n    >\n      <div\n        className=\"me-blend\"\n        style={{\n          position: \"absolute\",\n          left: w / 2 - 200,\n          top: h / 2 - 320\n        }}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          left: w / 2 - 300,\n          top: h / 2 - 50 // size of div\n        }}\n      >\n        <div\n          style={{\n            fontSize: 37\n          }}\n        >\n          Adam Menges\n        </div>\n        <div\n          style={{\n            fontSize: 17,\n            marginTop: -2\n          }}\n        >\n          <a href=\"mailto:adam@adammenges.com\">adam@adammenges.com</a>\n        </div>\n        <div\n          style={{\n            fontSize: 17\n          }}\n        >\n          <a href=\"sms:720-484-0275\">720-484-0275</a>\n        </div>\n      </div>\n    </div>\n  );\n  const mobile = (\n    <div\n      style={{\n        backgroundColor: \"#00080e\",\n        height: h,\n        width: w,\n        position: \"relative\",\n        overflow: \"hidden\"\n      }}\n    >\n      <div\n        className=\"me-blend-small\"\n        style={{\n          position: \"absolute\",\n          left: w / 2 - 225,\n          top: h / 2 - 225 - 50\n        }}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          left: w / 2 - 110,\n          top: h / 2 + 125\n        }}\n      >\n        <div\n          style={{\n            fontSize: 37\n          }}\n        >\n          Adam Menges\n        </div>\n        <div\n          style={{\n            fontSize: 17,\n            marginTop: -2\n          }}\n        >\n          <a href=\"mailto:adam@adammenges.com\">adam@adammenges.com</a>\n        </div>\n        <div\n          style={{\n            fontSize: 17\n          }}\n        >\n          <a href=\"sms:720-484-0275\">720-484-0275</a>\n        </div>\n      </div>\n    </div>\n  );\n  return <div style={{ position: \"relative\" }}>{small ? mobile : desktop}</div>;\n};\n\nfunction App() {\n  return <div className=\"App\">{Header()}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}